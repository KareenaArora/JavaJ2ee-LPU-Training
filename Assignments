// Assignment: Print Your Name in Your Regional Language with unicode table as reference :)

package Assignment1;

public class Assignment1 
{
		public static void main(String[] args)
		{
			String fn = "\u0A15\u0A30\u0A40\u0A28\u0A3E";
			String ln = "\u0A05\u0A30\u0A4C\u0A5C\u0A3E";
			System.out.println("Name: "+fn+" "+ln);


		}

}


########################################################################################################################################################


// Assignment: Explore shift operators on negative numbers

package Assignment2;

public class Assignment2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
				// Shift Operators
				// >>, <<, >>>

				int num1 = 8; 				
				int num2 = num1 >> 2;		
				System.out.println("num2 is: "+num2);

				int num3 = num1 << 2;		
				System.out.println("num5 is: "+num3);

				int num4 = -10; 				
				int num5 = num4 >> 2;		
				System.out.println("num5 is: "+num5);
				
				int num6 = -10; 				
				int num7 = num6 << 2;		
				System.out.println("num7 is: "+num7);
				// Misc Operators : as in when we advance
				
				// works only on positive numbers
				int num8 = 8; 				
				int num9 = num8 >>> 2;		
				System.out.println("num9 is: "+num9);

				int tResult = (-10 > 2) ? 1 : 0;
				System.out.println("tResult is "+tResult);
		

	}

}


####################################################################################################################################################


// Assignment: Implement Recursive Function to Code binary representation of a number

import java.io.*;

class Main 
{ 
      
     
    static int find(int decimal_number) 
    { 
        if (decimal_number == 0)  
            return 0;  
              
        else
          
        return (decimal_number % 2 + 10 *  
                find(decimal_number / 2)); 
    } 
      

public static void main(String args[]) 
{ 
    int decimal_number = 10; 
    System.out.println(find(decimal_number)); 
} 
  
} 


###################################################################################################################################################


// Assignment: Explore Overriding in case of static methods !!


class A 
{
	public static int sum(int a, int b) 
	{
		return a+b;
	}
	public int s(int a, int b) 
	{
		return a+b;
	}
}
class B extends A 
{
	public static int sum(int a, int b) 
	{
		return a-b;
	}
	public int s(int a, int b) 
	{
		return a-b;
	}
}

public class Assignment4 
{
	public static void main(String[] args) 
	{

		System.out.println("Calling the static methods without object creation");
		System.out.println(A.sum(5,2));
		System.out.println(B.sum(5,2));
		B test1 = new B();
		A test2 = new B(); 
		A test3 = new A();

		System.out.println("Calling the non-static methods with object creation and method overriding");
		System.out.println(test1.s(5,2));
		System.out.println(test2.s(5,2)); 
		System.out.println(test3.s(5,2));

		System.out.println("Calling the static methods with object creation and method overriding");
		System.out.println(test1.sum(5,2));
		System.out.println(test2.sum(5,2)); 
		System.out.println(test3.sum(5,2));
	}
}


###############################################################################################################################################


// Assignment: Write insertionSort method to sort the elements of array

public class Main {  
    public static void insertionSort(int array[]) {  
        int n = array.length;  
        for (int j = 1; j < n; j++) {  
            int key = array[j];  
            int i = j-1;  
            while ( (i > -1) && ( array [i] > key ) ) {  
                array [i+1] = array [i];  
                i--;  
            }  
            array[i+1] = key;  
        }  
    }  
       
public static void main(String args[]){    
        int[] arr1 = {9,14,3,2,43,11,58,22};    
        System.out.println("Before Insertion Sort");    
        for(int i:arr1){    
            System.out.print(i+" ");    
        }    
        System.out.println();    
            
        insertionSort(arr1);    
           
        System.out.println("After Insertion Sort");    
        for(int i:arr1){    
            System.out.print(i+" ");    
        }    
    }    
}    
